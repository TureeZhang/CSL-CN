import { Renderer2, ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { MdEditorOption } from './md-editor.types';
import * as ɵngcc0 from '@angular/core';
export declare class MarkdownEditorComponent implements ControlValueAccessor, Validator {
    required: boolean;
    maxlength: number;
    private _renderer;
    private _domSanitizer;
    aceEditorContainer: ElementRef;
    hideToolbar: boolean;
    height: string;
    preRender: Function;
    upload: Function;
    mode: string;
    private _mode;
    options: MdEditorOption;
    private _options;
    hideIcons: any;
    showPreviewPanel: boolean;
    isFullScreen: boolean;
    previewHtml: any;
    dragover: boolean;
    isUploading: boolean;
    markdownValue: any;
    private _markdownValue;
    private _editor;
    private _editorResizeTimer;
    private _renderMarkTimeout;
    private _markedOpt;
    private _defaultOption;
    private readonly _hasUploadFunction;
    private _onChange;
    private _onTouched;
    constructor(required: boolean, maxlength: number, _renderer: Renderer2, _domSanitizer: DomSanitizer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any | Array<any>): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    validate(c: AbstractControl): ValidationErrors;
    insertContent(type: string, customContent?: string): void;
    togglePreview(): void;
    previewPanelClick(event: Event): void;
    fullScreen(): void;
    mdEditorResize(size: any): void;
    editorResize(timeOut?: number): void;
    onDragover(evt: DragEvent): void;
    onDrop(evt: DragEvent): void;
    onDragleave(evt: DragEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownEditorComponent, [{ attribute: "required"; }, { attribute: "maxlength"; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkdownEditorComponent, "md-editor", never, { "hideToolbar": "hideToolbar"; "height": "height"; "mode": "mode"; "options": "options"; "preRender": "preRender"; "upload": "upload"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWQtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtZC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBNZEVkaXRvck9wdGlvbiB9IGZyb20gJy4vbWQtZWRpdG9yLnR5cGVzJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFya2Rvd25FZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICAgIHJlcXVpcmVkOiBib29sZWFuO1xyXG4gICAgbWF4bGVuZ3RoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcclxuICAgIHByaXZhdGUgX2RvbVNhbml0aXplcjtcclxuICAgIGFjZUVkaXRvckNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICAgIGhpZGVUb29sYmFyOiBib29sZWFuO1xyXG4gICAgaGVpZ2h0OiBzdHJpbmc7XHJcbiAgICBwcmVSZW5kZXI6IEZ1bmN0aW9uO1xyXG4gICAgdXBsb2FkOiBGdW5jdGlvbjtcclxuICAgIG1vZGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgX21vZGU7XHJcbiAgICBvcHRpb25zOiBNZEVkaXRvck9wdGlvbjtcclxuICAgIHByaXZhdGUgX29wdGlvbnM7XHJcbiAgICBoaWRlSWNvbnM6IGFueTtcclxuICAgIHNob3dQcmV2aWV3UGFuZWw6IGJvb2xlYW47XHJcbiAgICBpc0Z1bGxTY3JlZW46IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3SHRtbDogYW55O1xyXG4gICAgZHJhZ292ZXI6IGJvb2xlYW47XHJcbiAgICBpc1VwbG9hZGluZzogYm9vbGVhbjtcclxuICAgIG1hcmtkb3duVmFsdWU6IGFueTtcclxuICAgIHByaXZhdGUgX21hcmtkb3duVmFsdWU7XHJcbiAgICBwcml2YXRlIF9lZGl0b3I7XHJcbiAgICBwcml2YXRlIF9lZGl0b3JSZXNpemVUaW1lcjtcclxuICAgIHByaXZhdGUgX3JlbmRlck1hcmtUaW1lb3V0O1xyXG4gICAgcHJpdmF0ZSBfbWFya2VkT3B0O1xyXG4gICAgcHJpdmF0ZSBfZGVmYXVsdE9wdGlvbjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2hhc1VwbG9hZEZ1bmN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2U7XHJcbiAgICBwcml2YXRlIF9vblRvdWNoZWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihyZXF1aXJlZDogYm9vbGVhbiwgbWF4bGVuZ3RoOiBudW1iZXIsIF9yZW5kZXJlcjogUmVuZGVyZXIsIF9kb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55IHwgQXJyYXk8YW55Pik6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkO1xyXG4gICAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycztcclxuICAgIGluc2VydENvbnRlbnQodHlwZTogc3RyaW5nLCBjdXN0b21Db250ZW50Pzogc3RyaW5nKTogdm9pZDtcclxuICAgIHRvZ2dsZVByZXZpZXcoKTogdm9pZDtcclxuICAgIHByZXZpZXdQYW5lbENsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICBmdWxsU2NyZWVuKCk6IHZvaWQ7XHJcbiAgICBtZEVkaXRvclJlc2l6ZShzaXplOiBhbnkpOiB2b2lkO1xyXG4gICAgZWRpdG9yUmVzaXplKHRpbWVPdXQ/OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgb25EcmFnb3ZlcihldnQ6IERyYWdFdmVudCk6IHZvaWQ7XHJcbiAgICBvbkRyb3AoZXZ0OiBEcmFnRXZlbnQpOiB2b2lkO1xyXG4gICAgb25EcmFnbGVhdmUoZXZ0OiBEcmFnRXZlbnQpOiB2b2lkO1xyXG59XHJcbiJdfQ==
